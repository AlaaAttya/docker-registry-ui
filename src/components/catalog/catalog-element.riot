<!--
Copyright (C) 2016-2019 Jones Magloire @Joxit

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<catalog-element>
  <!-- Begin of tag -->
  <div class="content">
    <material-card class="list highlight" item="{props.item}" expanded="{state.expanded}">
      <material-waves onmousedown="{this.triggerLaunch}" center="true" color="#ddd" setLaunchListener="{ setLaunchListener }" />
      <span>
        <i class="material-icons">send</i>
        { typeof props.item === "string" ? props.item : props.item.repo }
        <div if="{typeof props.item !== 'string'}" class="item-count right">
          { props.item.images && props.item.images.length } images
          <i class="material-icons animated {state.expanded ? 'expanded' : ''}">expand_more</i>
        </div>
      </span>
    </material-card>
    <catalog-element if="{typeof props.item !== 'string'}"
      class="animated {!state.expanded ? 'hide' : ''} {state.expanding ? 'expanding' : ''}"
      each="{item in props.item.images}" item="{ item }" />
  </div>
  <script>
    export default {
      onMounted(props) {
        const card = this.$('material-card');
        if (!card) {
          return;
        }
        if (props.item.images && props.item.images.length === 1) {
          props.item = props.item.images[0];
        }
        card.onclick = (e) => {
          if (!props.item.repo) {
            // registryUI.taglist.go(props.item);
          } else {
            this.update({
              expanded: !this.state.expanded,
              expanding: true
            });
            setTimeout(() => {
              this.update({
                expanding: false
              });
            }, 50)
          }
        }
      },
      setLaunchListener(cb) {
        this.triggerLaunch = cb;
      }
    }
  </script>
  <!-- End of tag -->
</catalog-element>